import 'package:drift/drift.dart';
import 'package:drift_flutter/drift_flutter.dart';
import 'package:path_provider/path_provider.dart';

class Users extends Table {
  IntColumn get id => integer().autoIncrement()();

  // Example changes:
  // v1: name: TextColumn
  // v2: age: TextColumn → v3: IntegerColumn
  // v3: name → fullName (renamed)
  // v4: middleName removed
  // v5: table renamed
  // v6: name becomes NOT NULL
  TextColumn get fullName => text()(); // originally: name
  IntColumn get age => integer().nullable()(); // originally: text()
}

@DriftDatabase(tables: [Users])
class AppDatabase extends _$AppDatabase {
  AppDatabase([QueryExecutor? executor]) : super(executor ?? _openConnection());

  @override
  int get schemaVersion => 6;

  @override
  MigrationStrategy get migration => MigrationStrategy(
        onCreate: (m) => m.createAll(),
        onUpgrade: (m, from, to) async {
          if (from == 1 && to == 2) {
            // Alter column type: age from TEXT → INTEGER
            await m.renameTable('users', 'users_old');
            await m.createTable(users);
            await customStatement('''
              INSERT INTO users (id, fullName, age)
              SELECT id, name, CAST(age AS INTEGER) FROM users_old;
            ''');
            await m.deleteTable('users_old');
          }

          if (from == 2 && to == 3) {
            // Rename column: name → fullName
            await m.renameTable('users', 'users_old');
            await m.createTable(users);
            await customStatement('''
              INSERT INTO users (id, fullName, age)
              SELECT id, name, age FROM users_old;
            ''');
            await m.deleteTable('users_old');
          }

          if (from == 3 && to == 4) {
            // Drop column: middleName
            await m.renameTable('users', 'users_old');
            await m.createTable(users);
            await customStatement('''
              INSERT INTO users (id, fullName, age)
              SELECT id, fullName, age FROM users_old;
            ''');
            await m.deleteTable('users_old');
          }

          if (from == 4 && to == 5) {
            // Rename table: users → user_profiles
            await m.renameTable('users', 'user_profiles');
          }

          if (from == 5 && to == 6) {
            // Change constraint: fullName to NOT NULL
            await m.renameTable('user_profiles', 'user_profiles_old');
            await m.createTable(users); // now fullName is NOT NULL
            await customStatement('''
              INSERT INTO users (id, fullName, age)
              SELECT id, fullName, age FROM user_profiles_old WHERE fullName IS NOT NULL;
            ''');
            await m.deleteTable('user_profiles_old');
          }
        },
      );

  static QueryExecutor _openConnection() {
    return driftDatabase(
      name: 'my_database',
      native: const DriftNativeOptions(
        databaseDirectory: getApplicationSupportDirectory,
      ),
    );
  }
}
